const int numKeys = 24;
const int max = 64;

int channel[numKeys]; 

const int colourLookup[24];
//const int colourLookup[128];

const int midiNoteOff         = 0x8;
const int midiNoteOn          = 0x9;
const int midiPitchBend       = 0xe;

const int configItemId_octaveTopology = 8;

int currentOctave;
float currentGlobalBrightness;

int rVal;
int gVal;
int bVal;

void initialise() {
  fillReferenceColourTable();  
  
  for(int i = 0; i < 24; i++) {
    int color = makeARGB(255, 0, 0, 0);
    fillPixel(color, i, 0);
  }
}

void keyStrike (int index, int z, int vz) {
    
  int color = colourLookup[index];
  fillPixel(color, index, 0);  

  //Test increment/decrement
  //colourLookup[index] += 0xFF000010;
  
  int note = getNote (index);
  int chan = assignChannel (note);
  channel[index] = chan;

  sendNoteOn (chan, note, vz);
}

void keyPress (int index, int z, int vz)
{
    int note = getNote (index);
    int chan = channel[index];

    sendAftertouch (chan, note, z);
}

void keyLift (int index, int z, int vz)
{
    int color = makeARGB(255, 0, 0, 0);
    fillPixel(color, index, 0);
    
    int note = getNote (index);
    int chan = channel[index];

    sendNoteOff (chan, note, vz);
    deassignChannel (note, chan);
}

int getNote(int index) {
  return 48 + 0 * 12 + index;
}

//Total possible unique colours is 16,777,216 (256 * 256 * 256)
//TODO: Handle pitch bend on last 12 channels to tune colours of notes
//TODO: Map resolution of 16384 across restricted ranges for each note (+/- 8192)
//TODO: Which is therefore about 196,608 per note (2,359,296 across whole octave)
//TODO: This gives a resolution of about 7 shades per increment (16,777,216 / 2,359,296 = 7.1bar)
void handleMIDI (int byte0, int byte1, int byte2) 
{
    int channel = byte0 & 0xf;
    int status = (byte0 >> 4) & 0xf;
    
    if (status == midiNoteOn)
    {
        int key = getKey (byte1);
        int color = colourLookup[key];
        fillPixel(color, key, 0);  
        
    }
    else if (status == midiNoteOff)
    {
        int key = getKey (byte1);
        int color = makeARGB(255, 0, 0, 0);
        fillPixel(color, key, 0);        
    }
    else if (status == midiPitchBend)
    {
        //TODO: Pack bytes and convert to RGB deltas
        //0-8192 = downward offset
        //8193-16384 = upward offset
        
        //https://forum.bome.com/t/msb-lsb-in-midifile/4881/2
        int shift = byte1 << 7;
        int combined = byte2 | shift;
        
        log(combined);
        
        colourLookup[channel] = makeARGB(255, combined, 0, 0);
    }
}

int getKey (int note)
{
    int baseNoteNumber = 48 + ((currentOctave + getLocalConfig (configItemId_octaveTopology)) * 12);

    if (note < baseNoteNumber || note >= (baseNoteNumber + 24))
        return -1;

    return note - baseNoteNumber;
}

void testMessageReceived()
{
    for(int i = 0; i < 24; i++) {
        int color = makeARGB(255, getRandomInt(max), getRandomInt(max), getRandomInt(max));
         fillPixel(color, i, 0);
    }
}

void fillReferenceColourTable()
{
    int i = 0;
    colourLookup[i++] = 0xFF00FF80; //10 A#2/Bb2
    colourLookup[i++] = 0xFF00FFFF; //11 B2
    colourLookup[i++] = 0xFF0080FF; //0 C2
    colourLookup[i++] = 0xFF0000FF; //1 C#2/Db2
    colourLookup[i++] = 0xFF8000FF; //2 D2
    colourLookup[i++] = 0xFFFF00FF; //3 D#2/Eb2
    colourLookup[i++] = 0xFFFF0080; //4 E2
    colourLookup[i++] = 0xFFFF0000; //5 F2
    colourLookup[i++] = 0xFFFF8000; //6 F#2/Gb2
    colourLookup[i++] = 0xFFFFFF00; //7 G2
    colourLookup[i++] = 0xFF80FF00; //8 G#2/Gb2
    colourLookup[i++] = 0xFF00FF00; //9 A2
    //It would be possible to compare two tuning tables across 2-octave span of Lumi
    colourLookup[i++] = 0xFF00FF80; //22 A#3/Bb3
    colourLookup[i++] = 0xFF00FFFF; //23 B3
    colourLookup[i++] = 0xFF0080FF; //12 C3
    colourLookup[i++] = 0xFF0000FF; //13 C#3/Db3
    colourLookup[i++] = 0xFF8000FF; //14 D3
    colourLookup[i++] = 0xFFFF00FF; //15 D#3/Eb3
    colourLookup[i++] = 0xFFFF0080; //16 E3
    colourLookup[i++] = 0xFFFF0000; //17 F3
    colourLookup[i++] = 0xFFFF8000; //18 F#3/Gb3
    colourLookup[i++] = 0xFFFFFF00; //19 G3
    colourLookup[i++] = 0xFF80FF00; //20 G#3/Ab3
    colourLookup[i++] = 0xFF00FF00; //21 A3
    
    // Reference 1 table used for sanity checking (12 values - Roli-style with Red at C)
    /*
    colourLookup[i++] = 0xFFFF0000; //0 C2
    colourLookup[i++] = 0xFFFF8000; //1 C#2/Db2
    colourLookup[i++] = 0xFFFFFF00; //2 D2
    colourLookup[i++] = 0xFF80FF00; //3 D#2/Eb2
    colourLookup[i++] = 0xFF00FF00; //4 E2
    colourLookup[i++] = 0xFF00FF80; //5 F2
    colourLookup[i++] = 0xFF00FFFF; //6 F#2/Gb2
    colourLookup[i++] = 0xFF0080FF; //7 G2
    colourLookup[i++] = 0xFF0000FF; //8 G#2/Ab2
    colourLookup[i++] = 0xFF8000FF; //9 A2
    colourLookup[i++] = 0xFFFF00FF; //10 A#2/Bb2
    colourLookup[i++] = 0xFFFF0080; //11 B2
    colourLookup[i++] = 0xFFFF0000; //12 C3
    colourLookup[i++] = 0xFFFF8000; //13 C#3/Db3
    colourLookup[i++] = 0xFFFFFF00; //14 D3
    colourLookup[i++] = 0xFF80FF00; //15 D#3/Eb3
    colourLookup[i++] = 0xFF00FF00; //16 E3
    colourLookup[i++] = 0xFF00FF80; //17 F3
    colourLookup[i++] = 0xFF00FFFF; //18 F#3/Gb3
    colourLookup[i++] = 0xFF0080FF; //19 G3
    colourLookup[i++] = 0xFF0000FF; //20 G#3/Ab3
    colourLookup[i++] = 0xFF8000FF; //21 A3
    colourLookup[i++] = 0xFFFF00FF; //22 A33/Bb3
    colourLookup[i++] = 0xFFFF0080; //23 B3
    */
    // Reference 2 table used for sanity checking (128 values)
    //Original table of 128 colours spread from red to yellow or so...
    /*
    colourLookup[i++] = 0xffff4c72; //0 C2 //Edited to equal 0xffff506f - 0x0003fd
    colourLookup[i++] = 0xffff506f; //1 C#2/Db2
    colourLookup[i++] = 0xffff546c; //2 D2
    colourLookup[i++] = 0xffff5869; //3 D#2/Eb2
    colourLookup[i++] = 0xffff5c66; //4 E2
    colourLookup[i++] = 0xffff6063; //5 F2
    colourLookup[i++] = 0xffff6460; //6 F#2/Gb2
    colourLookup[i++] = 0xffff695c; //7 G2
    colourLookup[i++] = 0xffff6d59; //8 G#2/Ab2
    colourLookup[i++] = 0xffff7156; //9 A2
    colourLookup[i++] = 0xffff7553; //10 A#2/Bb2
    colourLookup[i++] = 0xffff7950; //11 B2
    colourLookup[i++] = 0xffff7d4d; //12 C3
    colourLookup[i++] = 0xffff814a; //13 C#3/Db3
    colourLookup[i++] = 0xffff8547; //14 D3
    colourLookup[i++] = 0xffff8944; //15 D#3/Eb3
    colourLookup[i++] = 0xffff8d41; //16 E3
    colourLookup[i++] = 0xffff923d; //17 F3
    colourLookup[i++] = 0xffff963a; //18 F#3/Gb3
    colourLookup[i++] = 0xffff9a37; //19 G3
    colourLookup[i++] = 0xffff9e34; //20 G#3/Ab3
    colourLookup[i++] = 0xffffa231; //21 A3
    colourLookup[i++] = 0xffffa62e; //22 A33/Bb3
    colourLookup[i++] = 0xffffaa2e; //23 B3
    colourLookup[i++] = 0xffffae2d; 
    colourLookup[i++] = 0xffffb12d; 
    colourLookup[i++] = 0xffffb52c; 
    colourLookup[i++] = 0xffffb92c; 
    colourLookup[i++] = 0xffffbd2b; 
    colourLookup[i++] = 0xffffc12b; 
    colourLookup[i++] = 0xffffc42b; 
    colourLookup[i++] = 0xffffc82a; 
    colourLookup[i++] = 0xffffcc2a; 
    colourLookup[i++] = 0xffffd029; 
    colourLookup[i++] = 0xffffd429; 
    colourLookup[i++] = 0xffffd828; 
    colourLookup[i++] = 0xffffdb28; 
    colourLookup[i++] = 0xffffdf28; 
    colourLookup[i++] = 0xffffe327; 
    colourLookup[i++] = 0xffffe727; 
    colourLookup[i++] = 0xffffeb26; 
    colourLookup[i++] = 0xffffee26; 
    colourLookup[i++] = 0xfffff225; 
    colourLookup[i++] = 0xfffff625; 
    colourLookup[i++] = 0xfff7f62a; 
    colourLookup[i++] = 0xfff0f72e; 
    colourLookup[i++] = 0xffe8f733; 
    colourLookup[i++] = 0xffe1f837; 
    colourLookup[i++] = 0xffd9f83c; 
    colourLookup[i++] = 0xffd1f841; 
    colourLookup[i++] = 0xffcaf945; 
    colourLookup[i++] = 0xffc2f94a; 
    colourLookup[i++] = 0xffbaf94f; 
    colourLookup[i++] = 0xffb3fa53; 
    colourLookup[i++] = 0xffabfa58; 
    colourLookup[i++] = 0xffa4fb5c; 
    colourLookup[i++] = 0xff9cfb61; 
    colourLookup[i++] = 0xff94fb66; 
    colourLookup[i++] = 0xff8dfc6a; 
    colourLookup[i++] = 0xff85fc6f; 
    colourLookup[i++] = 0xff7dfc74; 
    colourLookup[i++] = 0xff76fd78; 
    colourLookup[i++] = 0xff6efd7d; 
    colourLookup[i++] = 0xff67fe81; 
    colourLookup[i++] = 0xff5ffe86; 
    colourLookup[i++] = 0xff5cfc8b; 
    colourLookup[i++] = 0xff59fa8f; 
    colourLookup[i++] = 0xff56f894; 
    colourLookup[i++] = 0xff53f698; 
    colourLookup[i++] = 0xff50f49d; 
    colourLookup[i++] = 0xff4df2a2; 
    colourLookup[i++] = 0xff4af0a6; 
    colourLookup[i++] = 0xff47eeab; 
    colourLookup[i++] = 0xff44ecb0; 
    colourLookup[i++] = 0xff41eab4; 
    colourLookup[i++] = 0xff3ee9b9; 
    colourLookup[i++] = 0xff3be7bd; 
    colourLookup[i++] = 0xff38e5c2; 
    colourLookup[i++] = 0xff35e3c7; 
    colourLookup[i++] = 0xff32e1cb; 
    colourLookup[i++] = 0xff2fdfd0; 
    colourLookup[i++] = 0xff2cddd5; 
    colourLookup[i++] = 0xff29dbd9; 
    colourLookup[i++] = 0xff26d9de; 
    colourLookup[i++] = 0xff23d7e2; 
    colourLookup[i++] = 0xff20d5e7; 
    colourLookup[i++] = 0xff23d0e8; 
    colourLookup[i++] = 0xff26cbe9; 
    colourLookup[i++] = 0xff29c6ea; 
    colourLookup[i++] = 0xff2cc1ec; 
    colourLookup[i++] = 0xff2fbced; 
    colourLookup[i++] = 0xff32b7ee; 
    colourLookup[i++] = 0xff35b2ef; 
    colourLookup[i++] = 0xff38adf0; 
    colourLookup[i++] = 0xff3ba8f1; 
    colourLookup[i++] = 0xff3ea3f2; 
    colourLookup[i++] = 0xff409ff4; 
    colourLookup[i++] = 0xff439af5; 
    colourLookup[i++] = 0xff4695f6; 
    colourLookup[i++] = 0xff4990f7; 
    colourLookup[i++] = 0xff4c8bf8; 
    colourLookup[i++] = 0xff4f86f9; 
    colourLookup[i++] = 0xff5281fa; 
    colourLookup[i++] = 0xff557cfc; 
    colourLookup[i++] = 0xff5877fd; 
    colourLookup[i++] = 0xff5b72fe; 
    colourLookup[i++] = 0xff5e6dff; 
    colourLookup[i++] = 0xff616bfe; 
    colourLookup[i++] = 0xff6469fd; 
    colourLookup[i++] = 0xff6767fc; 
    colourLookup[i++] = 0xff6b64fb; 
    colourLookup[i++] = 0xff6e62fa; 
    colourLookup[i++] = 0xff7160f9; 
    colourLookup[i++] = 0xff745ef8; 
    colourLookup[i++] = 0xff775cf7; 
    colourLookup[i++] = 0xff7a5af6; 
    colourLookup[i++] = 0xff7e58f5; 
    colourLookup[i++] = 0xff8155f3; 
    colourLookup[i++] = 0xff8453f2; 
    colourLookup[i++] = 0xff8751f1; 
    colourLookup[i++] = 0xff8a4ff0; 
    colourLookup[i++] = 0xff8d4def; 
    colourLookup[i++] = 0xff904bee; 
    colourLookup[i++] = 0xff9448ed; 
    colourLookup[i++] = 0xff9746ec; 
    colourLookup[i++] = 0xff9a44eb; 
    colourLookup[i++] = 0xff9d42ea; 
    colourLookup[i++] = 0xff9d46a7; //Edited to equal 0xff9d42ea + 0x0003fd
    */
}